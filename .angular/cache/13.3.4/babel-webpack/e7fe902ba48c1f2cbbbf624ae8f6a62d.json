{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map, pluck } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let ShoppingCartService = /*#__PURE__*/(() => {\n  class ShoppingCartService {\n    constructor() {\n      this.shoppingCart$ = new BehaviorSubject({\n        items: [],\n        subTotal: 0,\n        discount: 0,\n        total: 0\n      });\n    }\n\n    setShoppingCart(shoppingCart) {\n      this.shoppingCart$.next(shoppingCart);\n    }\n\n    addItem(product) {\n      const shoppingCart = { ...this.shoppingCart$.value\n      };\n      let existing = false;\n      shoppingCart.items = shoppingCart.items.map(item => {\n        if (product.id === item.id) {\n          existing = true;\n          item.quantity++;\n        }\n\n        return item;\n      });\n\n      if (!existing) {\n        shoppingCart.items.push({\n          id: product.id,\n          name: product.name,\n          quantity: 1,\n          price: product.price,\n          discount: product.discount\n        });\n      }\n\n      this.setShoppingCart(shoppingCart);\n    }\n\n    deleteItem(id) {\n      const shoppingCart = { ...this.shoppingCart$.value\n      };\n      shoppingCart.items = shoppingCart.items.map(item => {\n        if (item.id === id) {\n          item.quantity--;\n        }\n\n        return item;\n      }).filter(item => item.quantity > 0);\n      this.setShoppingCart(shoppingCart);\n    }\n\n    getItems() {\n      return this.shoppingCart$.pipe(pluck('items'));\n    }\n\n    getSubTotal() {\n      return this.shoppingCart$.pipe(map(cart => {\n        const subTotal = cart?.items.map(item => item.quantity * item.price).reduce((prev, curr) => prev + curr, 0);\n        return subTotal;\n      }));\n    }\n\n    getDiscount() {\n      return this.shoppingCart$.pipe(map(cart => {\n        const discount = cart?.items.map(item => item.quantity * item.discount).reduce((prev, curr) => prev + curr, 0);\n        return discount;\n      }));\n    }\n\n  }\n\n  ShoppingCartService.ɵfac = function ShoppingCartService_Factory(t) {\n    return new (t || ShoppingCartService)();\n  };\n\n  ShoppingCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ShoppingCartService,\n    factory: ShoppingCartService.ɵfac,\n    providedIn: 'root'\n  });\n  return ShoppingCartService;\n})();","map":null,"metadata":{},"sourceType":"module"}